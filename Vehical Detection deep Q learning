import numpy as np

class ChessEnvironment:
    def __init__(self):
        self.board = np.array([
            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
            ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']
        ])
        self.current_player = 'white'

    def is_checkmate(self, player):
        king = 'K' if player == 'white' else 'k'
        return np.all(self.board != king)

    def make_move(self, move):
        if move is not None:
            row1, col1, row2, col2 = move
            self.board[row2, col2] = self.board[row1, col1]
            self.board[row1, col1] = ' '
            self.current_player = 'white' if self.current_player == 'black' else 'black'

class DQLAgent:
    def __init__(self):
        pass

    def choose_move(self, state):
        if np.random.rand() < 0.5:
            return (0, 0, 1, 0)  
        else:
            return None  

chess_env = ChessEnvironment()
dql_agent = DQLAgent()

for episode in range(10):
    while not chess_env.is_checkmate(chess_env.current_player):
        state = chess_env.board
        move = dql_agent.choose_move(state)
        chess_env.make_move(move)
