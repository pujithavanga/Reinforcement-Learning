{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxSGzjuBVhbocOrnGZJidm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/pujithavanga/Reinforcement-Learning/blob/main/max%20reward\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "muay5Ui-dnoM",
        "outputId": "8a8832b1-90af-410f-87e7-5c2fcfbee749"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "Bandit() takes no arguments",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-2aa9b8d5bf66>\u001b[0m in \u001b[0;36m<cell line: 40>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;31m# Create a bandit environment\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m \u001b[0mbandit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBandit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;31m# Run epsilon-greedy algorithm with different values of epsilon\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: Bandit() takes no arguments"
          ]
        }
      ],
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to simulate the bandit problem with different arms having different reward probabilities\n",
        "class Bandit:\n",
        "    def init(self, arms):\n",
        "        self.arms = arms\n",
        "\n",
        "    def pull_arm(self, arm):\n",
        "        return np.random.rand() < self.arms[arm]\n",
        "\n",
        "# Epsilon-greedy algorithm for exploration and exploitation\n",
        "def epsilon_greedy(epsilon, num_iterations, bandit):\n",
        "    num_actions = len(bandit.arms)\n",
        "    action_values = np.zeros(num_actions)\n",
        "    action_attempts = np.zeros(num_actions)\n",
        "    rewards = []\n",
        "\n",
        "    for _ in range(num_iterations):\n",
        "        if np.random.rand() < epsilon:\n",
        "            # Exploration: Choose a random action\n",
        "            action = np.random.randint(num_actions)\n",
        "        else:\n",
        "            # Exploitation: Choose the action with the highest estimated value\n",
        "            action = np.argmax(action_values)\n",
        "\n",
        "        reward = bandit.pull_arm(action)\n",
        "        rewards.append(reward)\n",
        "\n",
        "        # Update action attempts and estimated action values\n",
        "        action_attempts[action] += 1\n",
        "        action_values[action] += (reward - action_values[action]) / action_attempts[action]\n",
        "\n",
        "    return rewards\n",
        "\n",
        "# Define the bandit arms (reward probabilities)\n",
        "arms = [0.3, 0.5, 0.8]  # Example probabilities\n",
        "\n",
        "# Create a bandit environment\n",
        "bandit = Bandit(arms)\n",
        "\n",
        "# Run epsilon-greedy algorithm with different values of epsilon\n",
        "epsilon_values = [0.1, 0.3, 0.5]\n",
        "num_iterations = 1000\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "for epsilon in epsilon_values:\n",
        "    rewards = epsilon_greedy(epsilon, num_iterations, bandit)\n",
        "    plt.plot(np.cumsum(rewards), label=f'Epsilon={epsilon}')\n",
        "\n",
        "plt.xlabel('Iterations')\n",
        "plt.ylabel('Cumulative Reward')\n",
        "plt.legend()\n",
        "plt.title('Exploration vs Exploitation in Reinforcement Learning')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to simulate the bandit problem with different arms having different reward probabilities\n",
        "class Bandit:\n",
        "    def __init__(self, arms):\n",
        "        self.arms = arms\n",
        "\n",
        "    def pull_arm(self, arm):\n",
        "        return np.random.rand() < self.arms[arm]\n",
        "\n",
        "# Epsilon-greedy algorithm for exploration and exploitation\n",
        "def epsilon_greedy(epsilon, num_iterations, bandit):\n",
        "    num_actions = len(bandit.arms)\n",
        "    action_values = np.zeros(num_actions)\n",
        "    action_attempts = np.zeros(num_actions)\n",
        "    rewards = []\n",
        "\n",
        "    for _ in range(num_iterations):\n",
        "        if np.random.rand() < epsilon:\n",
        "            # Exploration: Choose a random action\n",
        "            action = np.random.randint(num_actions)\n",
        "        else:\n",
        "            # Exploitation: Choose the action with the highest estimated value\n",
        "            action = np.argmax(action_values)\n",
        "\n",
        "        reward = bandit.pull_arm(action)\n",
        "        rewards.append(reward)\n",
        "\n",
        "        # Update action attempts and estimated action values\n",
        "        action_attempts[action] += 1\n",
        "        action_values[action] += (reward - action_values[action]) / action_attempts[action]\n",
        "\n",
        "    return rewards\n",
        "\n",
        "# Define the bandit arms (reward probabilities)\n",
        "arms = [0.3, 0.5, 0.8]  # Example probabilities\n",
        "\n",
        "# Create a bandit environment\n",
        "bandit = Bandit(arms=[0.3, 0.5, 0.8])\n",
        "\n",
        "# Run epsilon-greedy algorithm with different values of epsilon\n",
        "epsilon_values = [0.1, 0.3, 0.5]\n",
        "num_iterations = 1000\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "for epsilon in epsilon_values:\n",
        "    rewards = epsilon_greedy(epsilon, num_iterations, bandit)\n",
        "    plt.plot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "Ytmv2S9On_Pw",
        "outputId": "e67514c5-343a-425b-ef0b-29489c2ca31b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install matplotlib\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to simulate the bandit problem with different arms having different reward probabilities\n",
        "class Bandit:\n",
        "    def init(self, arms):\n",
        "        self.arms = arms\n",
        "\n",
        "    def pull_arm(self, arm):\n",
        "        return np.random.rand() < self.arms[arm]\n",
        "\n",
        "# Epsilon-greedy algorithm for exploration and exploitation\n",
        "def epsilon_greedy(epsilon, num_iterations, bandit):\n",
        "    num_actions = len(bandit.arms)\n",
        "    action_values = np.zeros(num_actions)\n",
        "    action_attempts = np.zeros(num_actions)\n",
        "    rewards = []\n",
        "\n",
        "    for _ in range(num_iterations):\n",
        "        if np.random.rand() < epsilon:\n",
        "            # Exploration: Choose a random action\n",
        "            action = np.random.randint(num_actions)\n",
        "        else:\n",
        "            # Exploitation: Choose the action with the highest estimated value\n",
        "            action = np.argmax(action_values)\n",
        "\n",
        "        reward = bandit.pull_arm(action)\n",
        "        rewards.append(reward)\n",
        "\n",
        "        # Update action attempts and estimated action values\n",
        "        action_attempts[action] += 1\n",
        "        action_values[action] += (reward - action_values[action]) / action_attempts[action]\n",
        "\n",
        "    return rewards\n",
        "\n",
        "# Define the bandit arms (reward probabilities)\n",
        "arms = [0.3, 0.5, 0.8]  # Example probabilities\n",
        "\n",
        "# Create a bandit environment\n",
        "bandit = Bandit(arms)\n",
        "\n",
        "# Run epsilon-greedy algorithm with different values of epsilon\n",
        "epsilon_values = [0.1, 0.3, 0.5]\n",
        "num_iterations = 1000\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "for epsilon in epsilon_values:\n",
        "    rewards = epsilon_greedy(epsilon, num_iterations, bandit)\n",
        "    plt.plot(np.cumsum(rewards), label=f'Epsilon={epsilon}')\n",
        "\n",
        "plt.xlabel('Iterations')\n",
        "plt.ylabel('Cumulative Reward')\n",
        "plt.legend()\n",
        "plt.title('Exploration vs Exploitation in Reinforcement Learning')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "GMm6TofJpK9B",
        "outputId": "a31f6dd8-c150-427d-d18d-a35b7523d719"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-6-de95b0a8d1a7>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-6-de95b0a8d1a7>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    pip install matplotlib\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install matplotlib\n"
      ],
      "metadata": {
        "id": "YJ0695_WpyRN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to simulate the bandit problem with different arms having different reward probabilities\n",
        "class Bandit:\n",
        "    def __init__(self, arms):\n",
        "        self.arms = arms\n",
        "\n",
        "    def pull_arm(self, arm):\n",
        "        return np.random.rand() < self.arms[arm]\n",
        "\n",
        "# Epsilon-greedy algorithm for exploration and exploitation\n",
        "def epsilon_greedy(epsilon, num_iterations, bandit):\n",
        "    num_actions = len(bandit.arms)\n",
        "    action_values = np.zeros(num_actions)\n",
        "    action_attempts = np.zeros(num_actions)\n",
        "    rewards = []\n",
        "\n",
        "    for _ in range(num_iterations):\n",
        "        if np.random.rand() < epsilon:\n",
        "            # Exploration: Choose a random action\n",
        "            action = np.random.randint(num_actions)\n",
        "        else:\n",
        "            # Exploitation: Choose the action with the highest estimated value\n",
        "            action = np.argmax(action_values)\n",
        "\n",
        "        reward = bandit.pull_arm(action)\n",
        "        rewards.append(reward)\n",
        "\n",
        "        # Update action attempts and estimated action values\n",
        "        action_attempts[action] += 1\n",
        "        action_values[action] += (reward - action_values[action]) / action_attempts[action]\n",
        "\n",
        "    return rewards\n",
        "\n",
        "# Define the bandit arms (reward probabilities)\n",
        "arms = [0.3, 0.5, 0.8]  # Example probabilities\n",
        "\n",
        "# Create a bandit environment\n",
        "bandit = Bandit(arms)\n",
        "\n",
        "# Run epsilon-greedy algorithm with different values of epsilon\n",
        "epsilon_values = [0.1, 0.3, 0.5]\n",
        "num_iterations = 1000\n",
        "\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "for epsilon in epsilon_values:\n",
        "    rewards = epsilon_greedy(epsilon, num_iterations, bandit)\n",
        "    plt.plot(np.cumsum(rewards), label=f'Epsilon={epsilon}')\n",
        "\n",
        "plt.xlabel('Iterations')\n",
        "plt.ylabel('Cumulative Reward')\n",
        "plt.legend()\n",
        "plt.title('Exploration vs Exploitation in Reinforcement Learning')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "Z8fFflb1qMiy",
        "outputId": "6f4135a7-c620-4c8f-d1ea-c2fbc8d69d09"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Define the grid world\n",
        "n_rows, n_cols = 2, 5\n",
        "grid_world = np.zeros((n_rows, n_cols))\n",
        "\n",
        "# Define rewards\n",
        "rewards = {\n",
        "    (1, 4): 1,   # Maximum Reward\n",
        "    (2, 4): 1,   # Maximum Reward\n",
        "    (1, 3): -1,  # Fire state\n",
        "    (2, 3): -1,  # Fire state\n",
        "}\n",
        "\n",
        "# Define discount factor\n",
        "gamma = 0.9\n",
        "\n",
        "# Define actions (up, down, left, right)\n",
        "actions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n",
        "action_names = ['Right', 'Left', 'Down', 'Up']\n",
        "\n",
        "# Function to calculate the Bellman update for a state\n",
        "def bellman_update(i, j, action):\n",
        "    if (i, j) in rewards:\n",
        "        return rewards[(i, j)]\n",
        "\n",
        "    total_reward = 0\n",
        "    for a, (di, dj) in enumerate(actions):\n",
        "        next_i, next_j = i + di, j + dj\n",
        "        if 0 <= next_i < n_rows and 0 <= next_j < n_cols:\n",
        "            total_reward += 0.25 * (grid_world[next_i, next_j] * gamma)\n",
        "\n",
        "    return total_reward\n",
        "\n",
        "# Perform the Bellman update for state values\n",
        "num_iterations = 100\n",
        "for _ in range(num_iterations):\n",
        "    new_grid_world = np.zeros((n_rows, n_cols))\n",
        "    for i in range(n_rows):\n",
        "        for j in range(n_cols):\n",
        "            new_grid_world[i, j] = max([bellman_update(i, j, a) for a in actions])\n",
        "\n",
        "    grid_world = new_grid_world\n",
        "\n",
        "# Calculate the optimal policy\n",
        "optimal_policy = np.empty((n_rows, n_cols), dtype=object)\n",
        "for i in range(n_rows):\n",
        "    for j in range(n_cols):\n",
        "        if (i, j) not in rewards:\n",
        "            optimal_policy[i, j] = action_names[np.argmax([bellman_update(i, j, a) for a in actions])]\n",
        "        else:\n",
        "            optimal_policy[i, j] = None  # Set None for cells with rewards\n",
        "\n",
        "# Replace None with a placeholder string\n",
        "optimal_policy = np.where(optimal_policy != None, optimal_policy.astype(str), 'Reward')\n",
        "\n",
        "# Print the optimal policy\n",
        "print(\"Optimal Policy:\")\n",
        "for row in optimal_policy:\n",
        "    print(\" | \".join(row))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7NPCEhT2qfK9",
        "outputId": "e047ea34-47d1-47de-de6e-2e8a30b355c3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal Policy:\n",
            "Right | Right | Right | Right | Right\n",
            "Right | Right | Right | Reward | Reward\n"
          ]
        }
      ]
    }
  ]
}